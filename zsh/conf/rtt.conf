## functions to make your live easier while working 
## with rttester projects

## automatically detects if you enter a directory containing
## rttester projects and sets some environment variables for you:
## 	* $RTT_TESTCONTEXT 
##	* $testproc directory of last cd'ed testproc
##	* $src directory of sut sources if found
## 	* $rtc same as $RTT_TESTCONTEXT for convenience

## future: wrap rtt-compile-test etc. with some convenience wrapper

# test whether $1 is a directory containing a testproject
# by searching for a project.rtp file
is_test_proj() 
{
	local filename=${1}/project.rtp
	[[ -n $debug ]] && echo $filename
	if [[ -a $filename ]]; then
		return 0;
	else
		return 1;
	fi
}

# test whether $1 is a part of a test project by searching 
# down the file tree for a test project and store result in $2
in_test_proj()
{
	local cur=$(readlink -f ${1})
	while [[ $cur != "/" && -n $cur ]]; do
		if is_test_proj $cur; then 
			if [[ -n $2 ]]; then 
				eval "$2=\"$cur\""
			fi
			return 0
		else
			cur=$cur:h
		fi
	done
	return 1
}

# ditto for test procedure 
# checking for in_test_proj && exactly one conf, spec and doc dir 
# underneath

is_test_proc()
{
	local cur=$(readlink -f ${1})
	in_test_proj $cur || return 1
	for dir in conf specs; do
		matches=(${cur}/**/$dir(/N))
		if [[ ${#matches} != 1 ]]; then
			return 1
		fi	
	done
	return 0
}

# ditto for test proecdure
in_test_proc()
{
	local cur=$(readlink -f ${1})
	while [[ $cur != "/" && -n $cur ]]; do
		if is_test_proc $cur; then
			if [[ -n $2 ]]; then  
				eval "$2=\"$cur\""
			fi
			return 0
		else
			cur=$cur:h
		fi
	done
	return 1
}

typeset -g RTT_TESTCONTEXT
typeset -g rtc
typeset -g testproc
typeset -g src 


## search for sut sources from $1 upward and store in $2
search_sources()
{
	cands=($1/(../)##sut_sources*(N/))
	if [[ ${#cands} == 1 ]]; then
		eval "$2=${cands:a}"
	fi
}

## set variables if entering a testproject directory
set_rtt_variables()
{
	# don't set $RTT_TESTCONTEXT if we are in a subdirectory of $RTT_TESTCONTEXT
	if [[ -z $rtc || -n ${PWD:#{rtc}*} ]]; then
		# find test context and store it
		in_test_proj $PWD RTT_TESTCONTEXT
		rtc=$RTT_TESTCONTEXT
	fi

	# try to find sources in one of the parent directories
	# and store in src if found
	search_sources $rtc src
	
	# check if we are in a test procedure and set the correct variable
	if [[ -n $rtc && -z $testproc || -n ${PWD:#${testproc}*} ]]; then
		in_test_proc $PWD testproc
	fi

	export RTT_TESTCONTEXT=$rtc
}



#at_chpwd+=('set_rtt_variables')


